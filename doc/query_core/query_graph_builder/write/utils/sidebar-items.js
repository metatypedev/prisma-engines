window.SIDEBAR_ITEMS = {"fn":[["coerce_vec","Coerces single values (`ParsedInputValue::Single` and `ParsedInputValue::Map`) into a vector. Simply unpacks `ParsedInputValue::List`."],["emulate_on_delete_cascade","Inserts cascade emulations into the graph between `parent_node` and `child_node`. `relation_field` is the relation field pointing to the model to be deleted. Recurses into the deletion emulation to ensure that subsequent deletions are handled correctly as well."],["emulate_on_delete_set_null","Inserts set null emulations into the graph between `parent_node` and `child_node`. `relation_field` is the relation field pointing to the model to be deleted. Recurses into the deletion emulation to ensure that subsequent deletions are handled correctly as well."],["emulate_on_update_cascade","Inserts cascade emulations into the graph between `parent_node` and `child_node`. `relation_field` is the relation field pointing to the model to be deleted. Recurses into the update emulation to ensure that subsequent updates are handled correctly as well."],["emulate_on_update_set_null","Inserts set null emulations into the graph between `parent_node` and `child_node`. `relation_field` is the relation field pointing to the model to be deleted. Recurses into the update emulation to ensure that subsequent updates are handled correctly as well."],["emulate_restrict","Inserts restrict emulations into the graph between `parent_node` and `child_node`. `relation_field` is the relation field pointing to the model to be deleted/updated."],["insert_emulated_on_delete","Inserts emulated referential actions for `onDelete` into the graph. All relations that refer to the `model` row(s) being deleted are checked for their desired emulation and inserted accordingly. Right now, supported modes are `Restrict` and `SetNull` (cascade will follow). Those checks fail at runtime and are inserted between `parent_node` and `child_node`."],["insert_emulated_on_update",""],["insert_emulated_on_update_with_intermediary_node","Inserts emulated referential actions for `onUpdate` into the graph. All relations that refer to the `model` row(s) being deleted are checked for their desired emulation and inserted accordingly. Right now, supported modes are `Restrict` and `SetNull` (cascade will follow). Those checks fail at runtime and are inserted between `parent_node` and `child_node`."],["insert_existing_1to1_related_model_checks","Inserts checks and disconnects for existing models for a 1:1 relation. Expects that the parent node returns a valid ID for the model the `parent_relation_field` is located on."],["insert_find_children_by_parent_node","Adds a read query to the query graph that finds related records by parent ID. Connects the parent node and the read node with an edge, which takes care of the node transformation based on the parent ID."],["node_is_create",""],["read_ids_infallible","Produces a non-failing read query that fetches the requested selection of records for a given filterable."],["update_records_node_placeholder","Creates an update many records query node and adds it to the query graph. Used to have a skeleton update node in the graph that can be further transformed during query execution based on available information."]]};